{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMwkGy0h4n7ZhDuRVFoqOgg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"IewxaC9-WIiQ","executionInfo":{"status":"ok","timestamp":1724519117273,"user_tz":180,"elapsed":851,"user":{"displayName":"Nicolas Felix","userId":"01974987891970297197"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mc2sLQVEWU3d","executionInfo":{"status":"ok","timestamp":1724519153504,"user_tz":180,"elapsed":36253,"user":{"displayName":"Nicolas Felix","userId":"01974987891970297197"}},"outputId":"5ad291cf-b1c1-47fb-b60b-febd582aa8ae"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["file_path = '/content/drive/My Drive/titanic.xlsx'\n","database = pd.read_excel(file_path)"],"metadata":{"id":"RgIzcqwlWW9P","executionInfo":{"status":"ok","timestamp":1724519172019,"user_tz":180,"elapsed":1058,"user":{"displayName":"Nicolas Felix","userId":"01974987891970297197"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["database.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"k9wLKhiCWmev","executionInfo":{"status":"ok","timestamp":1724519196162,"user_tz":180,"elapsed":413,"user":{"displayName":"Nicolas Felix","userId":"01974987891970297197"}},"outputId":"38919275-d5d7-4260-d094-6b749173e963"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       PassengerId    Survived      Pclass         Sex         Age  \\\n","count   891.000000  891.000000  891.000000  891.000000  891.000000   \n","mean    446.000000    0.383838    2.308642    0.352413   29.699118   \n","std     257.353842    0.486592    0.836071    0.477990   13.002015   \n","min       1.000000    0.000000    1.000000    0.000000    0.420000   \n","25%     223.500000    0.000000    2.000000    0.000000   22.000000   \n","50%     446.000000    0.000000    3.000000    0.000000   29.699118   \n","75%     668.500000    1.000000    3.000000    1.000000   35.000000   \n","max     891.000000    1.000000    3.000000    1.000000   80.000000   \n","\n","            SibSp       Parch        Fare    Embarked  \n","count  891.000000  891.000000  891.000000  889.000000  \n","mean     0.523008    0.381594   32.204208    1.362205  \n","std      1.102743    0.806057   49.693429    0.636157  \n","min      0.000000    0.000000    0.000000    1.000000  \n","25%      0.000000    0.000000    7.910400    1.000000  \n","50%      0.000000    0.000000   14.454200    1.000000  \n","75%      1.000000    0.000000   31.000000    2.000000  \n","max      8.000000    6.000000  512.329200    3.000000  "],"text/html":["\n","  <div id=\"df-ab51204c-d483-41fa-89b9-378de868cf86\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>889.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>0.352413</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","      <td>1.362205</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>0.477990</td>\n","      <td>13.002015</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","      <td>0.636157</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>22.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>29.699118</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>35.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab51204c-d483-41fa-89b9-378de868cf86')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ab51204c-d483-41fa-89b9-378de868cf86 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ab51204c-d483-41fa-89b9-378de868cf86');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2aa94c7a-aed4-4b5e-955c-2405b738b7ce\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2aa94c7a-aed4-4b5e-955c-2405b738b7ce')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2aa94c7a-aed4-4b5e-955c-2405b738b7ce button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"database\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429855,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648575\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079694,\n        \"min\": 0.836071240977049,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8733881563566,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.35241301907968575,\n          1.0,\n          0.4779900708960982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 305.2978992449289,\n        \"min\": 0.42,\n        \"max\": 891.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          891.0,\n          29.69911764705882,\n          35.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228578,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 313.8048764634758,\n        \"min\": 0.6361572404817023,\n        \"max\": 889.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          889.0,\n          1.3622047244094488,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":[],"metadata":{"id":"aTfcW-XpcTNK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["database.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"7J-KvAWSXcj7","executionInfo":{"status":"ok","timestamp":1724519415593,"user_tz":180,"elapsed":314,"user":{"displayName":"Nicolas Felix","userId":"01974987891970297197"}},"outputId":"ddc57414-a11e-4221-a433-6b1878ff50dc"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name  Sex   Age  SibSp  Parch  \\\n","0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n","2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n","4                           Allen, Mr. William Henry    0  35.0      0      0   \n","\n","             Ticket     Fare Cabin  Embarked  \n","0         A/5 21171   7.2500   NaN       1.0  \n","1          PC 17599  71.2833   C85       2.0  \n","2  STON/O2. 3101282   7.9250   NaN       1.0  \n","3            113803  53.1000  C123       1.0  \n","4            373450   8.0500   NaN       1.0  "],"text/html":["\n","  <div id=\"df-97abbf8c-eade-4e75-874e-fafba80e8ca0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97abbf8c-eade-4e75-874e-fafba80e8ca0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-97abbf8c-eade-4e75-874e-fafba80e8ca0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-97abbf8c-eade-4e75-874e-fafba80e8ca0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7db45cd4-8082-46e2-9827-2589e2d11800\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7db45cd4-8082-46e2-9827-2589e2d11800')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7db45cd4-8082-46e2-9827-2589e2d11800 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"database","summary":"{\n  \"name\": \"database\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.002015226002882,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          59.0,\n          36.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6361572404817023,\n        \"min\": 1.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"source":["# @title Sex vs Age\n","\n","from matplotlib import pyplot as plt\n","database.plot(kind='scatter', x='Sex', y='Age', s=32, alpha=.8)\n","plt.gca().spines[['top', 'right',]].set_visible(False)"],"cell_type":"code","execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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Oztb+P1+IYQQN9xwg7jzzjuT9R9++KGwWq3ikUceEdu3bxdz5szh69catfdcz5s3T9jtdvHKK6+Iffv2JbdwOJyqP4IptPc8H49vLWnT3vO8Z88e4fF4xG233SZ27NghXn/9dZGfny8eeOCBVP0RTKG953nOnDnC4/GIl156SezatUu8/fbbom/fvuLKK69M1R/BFMLhsPj000/Fp59+KgCIRx99VHz66afi22+/FUIIceedd4obbrghWd/8+vVvfvMbsX37dvH000/z9etUevLJJ0VxcbGw2+1i9OjRYuPGjcljF110kZg2bVqL+r/97W+if//+wm63i8GDB4s33njD4I7Nqz3nulevXgLACducOXOMb9xk2vvP9LEYZLRr73nesGGDGDNmjHA4HKJPnz7iwQcfFIlEwuCuzac95zkej4v77rtP9O3bVzidTlFUVCR+8YtfiMOHDxvfuIm8//77rf7/bfO5nTZtmrjoootO+J7hw4cLu90u+vTpI5YsWdKhPUpC8J4aERERmRPHyBAREZFpMcgQERGRaTHIEBERkWkxyBAREZFpMcgQERGRaTHIEBERkWkxyBAREZFpMcgQERGRaTHIEBERkWkxyBBR2tm/fz+mT5+O4uJiOBwOFBQUYPz48fjwww9T3RoRpRlrqhsgIjrelClTEIvF8Pzzz6NPnz4IBAJYs2YNDh48mOrWiCjN8I4MEaWV2tpa/Otf/8LDDz+Miy++GL169cLo0aMxe/ZsXHrppcmaW265BXl5ecjKysK4cePw2WefAWi6m1NQUICHHnoo+ZkbNmyA3W7HmjVrUvJnIqKOwyBDRGnF7XbD7XZj5cqViEajrdZMnToVNTU1WLVqFSorK3HuuefikksuwaFDh5CXl4c///nPuO+++7B582aEw2HccMMNuO2223DJJZcY/Kchoo7G1a+JKO28+uqr+OlPf4rGxkace+65uOiii3D11Vdj2LBhWL9+PSZOnIiamho4HI7k9/Tr1w933HEHbr31VgBAeXk53n33XYwaNQpbt27Fxx9/3KKeiDoHBhkiSkuRSAT/+te/sHHjRqxatQofffQRnnvuOdTX1+OXv/wlXC5Xi/rGxkb8+te/xsMPP5z8esiQIaiurkZlZSWGDh2aij8GEXUwBhkiMoVbbrkF77zzDn7xi1/gySefxNq1a0+oyc7ORvfu3QEA27Ztw3nnnYd4PI4VK1Zg0qRJBndMREbgW0tEZAqDBg3CypUrce6558Lv98NqtaJ3796t1sZiMVx//fW46qqrcM455+CWW27B1q1bkZ+fb2zTRNTheEeGiNLKwYMHMXXqVNx0000YNmwYPB4PNm/ejBkzZmDixIl47rnn8IMf/ADhcBjz589H//79sXfvXrzxxhu4/PLLMWrUKPzmN7/BK6+8gs8++wxutxsXXXQRvF4vXn/99VT/8YhIZwwyRJRWotEo7rvvPrz99tv4+uuvEY/HUVRUhKlTp+Kuu+6Cy+VCOBzG3XffjVdffTX5uvUPfvADzJ07F19//TV++MMf4v3338fYsWMBAN988w2+973vYd68eZg+fXqK/4REpCcGGSIiIjItziNDREREpsUgQ0RERKbFIENERESmxSBDREREpsUgQ0RERKbFIENERESmxSBDREREpsUgQ0RERKbFIENERESmxSBDREREpsUgQ0RERKb1/wMg53JLgXlFzQAAAABJRU5ErkJggg==\n"},"metadata":{}}],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"ji6XJpanZi7Q","executionInfo":{"status":"ok","timestamp":1724519953094,"user_tz":180,"elapsed":498,"user":{"displayName":"Nicolas Felix","userId":"01974987891970297197"}},"outputId":"1228ea35-5a14-4565-abfd-c7736d5a5e0d"}},{"cell_type":"code","source":["plt.boxplot(database['Age'])\n","plt.ylabel('Age')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"qsr1NHajaMRS","executionInfo":{"status":"ok","timestamp":1724520198418,"user_tz":180,"elapsed":628,"user":{"displayName":"Nicolas Felix","userId":"01974987891970297197"}},"outputId":"739dd7bc-61e9-414c-e89e-5a924cdcbbf5"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}